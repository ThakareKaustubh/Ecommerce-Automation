 2. Data Class for User Test Data
📁 models/user_data.py
from dataclasses import dataclass

@dataclass
class BirthDate:
    day: str
    month: str
    year: str

@dataclass
class Address:
    first_name: str
    last_name: str
    company: str
    address1: str
    address2: str
    country: str
    state: str
    city: str
    zipcode: str
    mobile_number: str

@dataclass
class User:
    username: str
    email: str
    password: str
    title: str
    birthdate: BirthDate
    address: Address


 3. Loading and Using Data
📁 conftest.py (Fixture to Load Data)

Assume you have a JSON like:

{
  "registration_data": {
    "username": "john_doe",
    "email": "john@example.com",
    "password": "securePass123",
    "title": "Mr",
    "birthdate": {
      "day": "10",
      "month": "May",
      "year": "1990"
    },
    "address": {
      "first_name": "John",
      "last_name": "Doe",
      "company": "ExampleCorp",
      "address1": "123 Main St",
      "address2": "Apt 4B",
      "country": "United States",
      "state": "California",
      "city": "Los Angeles",
      "zipcode": "90001",
      "mobile_number": "1234567890"
    }
  }
}

➕ Fixture to Load it into User class:

import json
import pytest
from models.user_data import User, Address, BirthDate

@pytest.fixture
def test_data():
    with open("data/registration_data.json") as f:
        raw = json.load(f)["registration_data"]

    user = User(
        username=raw["username"],
        email=raw["email"],
        password=raw["password"],
        title=raw["title"],
        birthdate=BirthDate(**raw["birthdate"]),
        address=Address(**raw["address"])
    )

    return user

✅ 4. Final Clean Test Example

def test_user_registration(setup, base_url, test_data):
    driver = setup
    driver.get(base_url)

    login = LoginPage(driver)
    reg = RegistrationPage(driver)

    assert login.check_loginpage_load()
    login.goto_login_signup_page()
    assert login.verify_new_user_signup()

    login.complete_registration_step_1(test_data.username, test_data.email)
    assert login.verify_registration_submit_text()

    reg.fill_user_registration_form(test_data)
    reg.submit_form()
    assert reg.verify_account_created()

    reg.continue_post_reg()
    assert test_data.username in reg.check_logged_in_user()

    reg.delete_created_account()
    assert reg.delete_account_confirmation()








    Summary
What You Did	Benefit
Used BasePage class	Centralized scroll logic
Used @dataclass for data	Cleaner, type-safe data handling
Used fixture + JSON	Reusable and flexible test data
Short test function	Easier to read and maintain

Would you like this structure converted into a GitHub-ready test project layout with folders (pages/, models/, tests/, data/)?